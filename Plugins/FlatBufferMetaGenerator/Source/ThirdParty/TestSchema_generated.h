// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTSCHEMA_TESTINGFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_TESTSCHEMA_TESTINGFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace TestingFlatBuffers {

struct FTestingFlatBuffer;
struct FTestingFlatBufferBuilder;

enum ECharacterType : int8_t {
  ECharacterType_UseDefault = 0,
  ECharacterType_Player = 1,
  ECharacterType_AI = 2,
  ECharacterType_Hidden = 3,
  ECharacterType_MIN = ECharacterType_UseDefault,
  ECharacterType_MAX = ECharacterType_Hidden
};

inline const ECharacterType (&EnumValuesECharacterType())[4] {
  static const ECharacterType values[] = {
    ECharacterType_UseDefault,
    ECharacterType_Player,
    ECharacterType_AI,
    ECharacterType_Hidden
  };
  return values;
}

inline const char * const *EnumNamesECharacterType() {
  static const char * const names[5] = {
    "UseDefault",
    "Player",
    "AI",
    "Hidden",
    nullptr
  };
  return names;
}

inline const char *EnumNameECharacterType(ECharacterType e) {
  if (::flatbuffers::IsOutRange(e, ECharacterType_UseDefault, ECharacterType_Hidden)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesECharacterType()[index];
}

struct FTestingFlatBuffer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FTestingFlatBufferBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MANA = 4,
    VT_HP = 6,
    VT_NAME = 8,
    VT_INVENTORY = 10,
    VT_CHTYPE = 12
  };
  int32_t mana() const {
    return GetField<int32_t>(VT_MANA, 150);
  }
  bool mutate_mana(int32_t _mana = 150) {
    return SetField<int32_t>(VT_MANA, _mana, 150);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 100);
  }
  bool mutate_hp(int32_t _hp = 100) {
    return SetField<int32_t>(VT_HP, _hp, 100);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_inventory() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  TestingFlatBuffers::ECharacterType chtype() const {
    return static_cast<TestingFlatBuffers::ECharacterType>(GetField<int8_t>(VT_CHTYPE, 0));
  }
  bool mutate_chtype(TestingFlatBuffers::ECharacterType _chtype = static_cast<TestingFlatBuffers::ECharacterType>(0)) {
    return SetField<int8_t>(VT_CHTYPE, static_cast<int8_t>(_chtype), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MANA, 4) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyVector(inventory()) &&
           VerifyField<int8_t>(verifier, VT_CHTYPE, 1) &&
           verifier.EndTable();
  }
};

struct FTestingFlatBufferBuilder {
  typedef FTestingFlatBuffer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mana(int32_t mana) {
    fbb_.AddElement<int32_t>(FTestingFlatBuffer::VT_MANA, mana, 150);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(FTestingFlatBuffer::VT_HP, hp, 100);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FTestingFlatBuffer::VT_NAME, name);
  }
  void add_inventory(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(FTestingFlatBuffer::VT_INVENTORY, inventory);
  }
  void add_chtype(TestingFlatBuffers::ECharacterType chtype) {
    fbb_.AddElement<int8_t>(FTestingFlatBuffer::VT_CHTYPE, static_cast<int8_t>(chtype), 0);
  }
  explicit FTestingFlatBufferBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FTestingFlatBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FTestingFlatBuffer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FTestingFlatBuffer> CreateFTestingFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mana = 150,
    int32_t hp = 100,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory = 0,
    TestingFlatBuffers::ECharacterType chtype = TestingFlatBuffers::ECharacterType_UseDefault) {
  FTestingFlatBufferBuilder builder_(_fbb);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_chtype(chtype);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FTestingFlatBuffer> CreateFTestingFlatBufferDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mana = 150,
    int32_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    TestingFlatBuffers::ECharacterType chtype = TestingFlatBuffers::ECharacterType_UseDefault) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto inventory__ = inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0;
  return TestingFlatBuffers::CreateFTestingFlatBuffer(
      _fbb,
      mana,
      hp,
      name__,
      inventory__,
      chtype);
}

inline const TestingFlatBuffers::FTestingFlatBuffer *GetFTestingFlatBuffer(const void *buf) {
  return ::flatbuffers::GetRoot<TestingFlatBuffers::FTestingFlatBuffer>(buf);
}

inline const TestingFlatBuffers::FTestingFlatBuffer *GetSizePrefixedFTestingFlatBuffer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestingFlatBuffers::FTestingFlatBuffer>(buf);
}

inline FTestingFlatBuffer *GetMutableFTestingFlatBuffer(void *buf) {
  return ::flatbuffers::GetMutableRoot<FTestingFlatBuffer>(buf);
}

inline TestingFlatBuffers::FTestingFlatBuffer *GetMutableSizePrefixedFTestingFlatBuffer(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<TestingFlatBuffers::FTestingFlatBuffer>(buf);
}

inline bool VerifyFTestingFlatBufferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestingFlatBuffers::FTestingFlatBuffer>(nullptr);
}

inline bool VerifySizePrefixedFTestingFlatBufferBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestingFlatBuffers::FTestingFlatBuffer>(nullptr);
}

inline void FinishFTestingFlatBufferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestingFlatBuffers::FTestingFlatBuffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFTestingFlatBufferBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestingFlatBuffers::FTestingFlatBuffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestingFlatBuffers

#endif  // FLATBUFFERS_GENERATED_TESTSCHEMA_TESTINGFLATBUFFERS_H_
